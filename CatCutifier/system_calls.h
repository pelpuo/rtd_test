#ifndef SYSTEM_CALLS
#define SYSTEM_CALLS

#include <stdio.h>
#include <stdlib.h>
#include <cstdint>
#include <cstdio>
#include <unistd.h>
#include <unordered_map>

#include "code_cache.h"
#include "logger.h"
#include "regfile.h"

namespace rail{
    /**
     * Emulates an ECALL instruction seen in the binary being instrumented
     * @param TRAPFRAME uint64_t pointer to the array storing register values
     * @return boolean indicating whether or not the instruction was emulated
    */
    bool handle_syscalls(uint64_t *TRAPFRAME);


    typedef enum{
        IO_SETUP = 0,
        IO_DESTROY,
        IO_SUBMIT,
        IO_CANCEL,
        IO_GETEVENTS,
        SETXATTR,
        LSETXATTR,
        FSETXATTR,
        GETXATTR,
        LGETXATTR,
        FGETXATTR,
        LISTXATTR,
        LLISTXATTR,
        FLISTXATTR,
        REMOVEXATTR,
        LREMOVEXATTR,
        FREMOVEXATTR,
        GETCWD,
        LOOKUP_DCOOKIE,
        EVENTFD2,
        EPOLL_CREATE1,
        EPOLL_CTL,
        EPOLL_PWAIT,
        DUP,
        DUP3,
        FCNTL64,
        INOTIFY_INIT1,
        INOTIFY_ADD_WATCH,
        INOTIFY_RM_WATCH,
        IOCTL,
        IOPRIO_SET,
        IOPRIO_GET,
        FLOCK,
        MKNODAT,
        MKDIRAT,
        UNLINKAT,
        SYMLINKAT,
        LINKAT,
        RENAMEAT,
        UMOUNT,
        MOUNT,
        PIVOT_ROOT,
        NI_SYSCALL,
        STATFS64,
        FSTATFS64,
        TRUNCATE64,
        FTRUNCATE64,
        FALLOCATE,
        FACCESSAT,
        CHDIR,
        FCHDIR,
        CHROOT,
        FCHMOD,
        FCHMODAT,
        FCHOWNAT,
        FCHOWN,
        OPENAT,
        CLOSE,
        VHANGUP,
        PIPE2,
        QUOTACTL,
        GETDENTS64,
        LSEEK,
        READ,
        WRITE,
        READV,
        WRITEV,
        PREAD64,
        PWRITE64,
        PREADV,
        PWRITEV,
        SENDFILE64,
        PSELECT6_TIME32,
        PPOLL_TIME32,
        SIGNALFD4,
        VMSPLICE,
        SPLICE,
        TEE,
        READLINKAT,
        NEWFSTATAT,
        NEWFSTAT,
        SYNC,
        FSYNC,
        FDATASYNC,
        // SYNC_FILE_RANGE2,
        SYNC_FILE_RANGE,
        TIMERFD_CREATE,
        TIMERFD_SETTIME = 411,
        TIMERFD_GETTIME = 410,
        UTIMENSAT = 412,
        ACCT = 89,
        CAPGET,
        CAPSET,
        PERSONALITY,
        EXIT,
        EXIT_GROUP,
        WAITID,
        SET_TID_ADDRESS,
        UNSHARE,
        FUTEX = 422,
        SET_ROBUST_LIST = 99,
        GET_ROBUST_LIST,
        NANOSLEEP,
        GETITIMER,
        SETITIMER,
        KEXEC_LOAD,
        INIT_MODULE,
        DELETE_MODULE,
        TIMER_CREATE,
        TIMER_GETTIME = 408,
        TIMER_GETOVERRUN = 109,
        TIMER_SETTIME = 409,
        TIMER_DELETE = 111,
        CLOCK_SETTIME = 404,
        CLOCK_GETTIME = 403,
        CLOCK_GETRES = 406,
        CLOCK_NANOSLEEP = 407,
        SYSLOG = 116,
        PTRACE,
        SCHED_SETPARAM,
        SCHED_SETSCHEDULER,
        SCHED_GETSCHEDULER,
        SCHED_GETPARAM,
        SCHED_SETAFFINITY,
        SCHED_GETAFFINITY,
        SCHED_YIELD,
        SCHED_GET_PRIORITY_MAX,
        SCHED_GET_PRIORITY_MIN,
        SCHED_RR_GET_INTERVAL = 423,
        RESTART_SYSCALL = 128,
        KILL,
        TKILL,
        TGKILL,
        SIGALTSTACK,
        RT_SIGSUSPEND,
        RT_SIGACTION,
        RT_SIGPROCMASK,
        RT_SIGPENDING,
        RT_SIGTIMEDWAIT_TIME32,
        RT_SIGQUEUEINFO,
        SETPRIORITY = 140,
        GETPRIORITY,
        REBOOT,
        SETREGID,
        SETGID,
        SETREUID,
        SETUID,
        SETRESUID,
        GETRESUID,
        SETRESGID,
        GETRESGID,
        SETFSUID,
        SETFSGID,
        TIMES,
        SETPGID,
        GETPGID,
        GETSID,
        SETSID,
        GETGROUPS,
        SETGROUPS,
        NEWUNAME,
        SETHOSTNAME,
        SETDOMAINNAME,
        GETRLIMIT,
        SETRLIMIT,
        GETRUSAGE,
        UMASK,
        PRCTL,
        GETCPU,
        GETTIMEOFDAY,
        SETTIMEOFDAY,
        ADJTIMEX,
        GETPID,
        GETPPID,
        GETUID,
        GETEUID,
        GETGID,
        GETEGID,
        GETTID,
        SYSINFO,
        MQ_OPEN,
        MQ_UNLINK,
        MQ_TIMEDSEND = 418,
        MQ_TIMEDRECEIVE = 419,
        MQ_NOTIFY = 184,
        MQ_GETSETATTR,
        MSGGET,
        MSGCTL,
        MSGRCV,
        MSGSND,
        SEMGET,
        SEMCTL,
        SEMTIMEDOP = 420,
        SEMOP = 193,
        SHMGET,
        SHMCTL,
        SHMAT,
        SHMDT,
        SOCKET,
        SOCKETPAIR,
        BIND,
        LISTEN,
        ACCEPT,
        CONNECT,
        GETSOCKNAME,
        GETPEERNAME,
        SENDTO,
        RECVFROM,
        SETSOCKOPT,
        GETSOCKOPT,
        SHUTDOWN,
        SENDMSG,
        RECVMSG,
        READAHEAD,
        BRK,
        MUNMAP,
        MREMAP,
        ADD_KEY,
        REQUEST_KEY,
        KEYCTL,
        CLONE,
        EXECVE,
        MMAP,
        FADVISE64_64,
        SWAPON,
        SWAPOFF,
        MPROTECT,
        MSYNC,
        MLOCK,
        MUNLOCK,
        MLOCKALL,
        MUNLOCKALL,
        MINCORE,
        MADVISE,
        REMAP_FILE_PAGES,
        MBIND,
        GET_MEMPOLICY,
        SET_MEMPOLICY,
        MIGRATE_PAGES,
        MOVE_PAGES,
        RT_TGSIGQUEUEINFO,
        PERF_EVENT_OPEN,
        ACCEPT4,
        RECVMMSG_TIME32,
        WAIT4 = 260,
        PRLIMIT64,
        FANOTIFY_INIT,
        FANOTIFY_MARK,
        NAME_TO_HANDLE_AT,
        OPEN_BY_HANDLE_AT,
        CLOCK_ADJTIME = 405,
        SYNCFS = 267,
        SETNS,
        SENDMMSG,
        PROCESS_VM_READV,
        KCMP,
        FINIT_MODULE,
        SCHED_SETATTR,
        SCHED_GETATTR,
        RENAMEAT2,
        SECCOMP,
        GETRANDOM,
        MEMFD_CREATE,
        BPF,
        EXECVEAT,
        USERFAULTFD,
        MEMBARRIER,
        MLOCK2,
        COPY_FILE_RANGE,
        PREADV2,
        PWRITEV2,
        PKEY_MPROTECT,
        PKEY_ALLOC,
        PKEY_FREE,
        STATX,
        IO_PGETEVENTS = 416,
        RSEQ = 293,
        KEXEC_FILE_LOAD,
        PIDFD_SEND_SIGNAL = 424,
        IO_URING_SETUP,
        IO_URING_ENTER,
        IO_URING_REGISTER,
        OPEN_TREE,
        MOVE_MOUNT,
        FSOPEN,
        FSCONFIG,
        FSMOUNT,
        FSPICK,
        PIDFD_OPEN,
        CLONE3,
        CLOSE_RANGE,
        OPENAT2,
        PIDFD_GETFD,
        FACCESSAT2,
        PROCESS_MADVISE
    }SYSTEMCALL;


    // Create an unordered map to hold the enum-to-string mappings
    // static std::unordered_map<SYSTEMCALL, std::string> SYSTEMCALL_NAMES;

    // Function to get the system call name by enum value

    /**
     * 
     * @param syscall 
     * @return boolean indicating whether or not the instruction was emulated
    */
    const std::string& getSystemCallName(SYSTEMCALL syscall);

}
#endif

